#!/bin/bash

source lib/common.sh

COMMANDS=()
declare -A COMMANDS_DESC

# Commands setup
COMMANDS+=("create")
COMMANDS+=("obscure")
COMMANDS+=("update")
COMMANDS+=("destroy")
COMMANDS+=("inventory")
COMMANDS+=("clobber")
COMMANDS+=("links")
COMMANDS+=("log")
COMMANDS+=("status")

COMMANDS_DESC["create"]="Create a new proxy instance and then obscure (au|usa|eu)"
COMMANDS_DESC["obscure"]="Obscure (change) ssh port and then update (au|usa|eu)"
COMMANDS_DESC["update"]="Complete provisioning (au|usa|eu)"
COMMANDS_DESC["destroy"]="Destroy an existing proxy instance"
COMMANDS_DESC["inventory"]="List all proxy instances"
COMMANDS_DESC["clobber"]="Remove virtualenv, temporary and log files"
COMMANDS_DESC["links"]="Show useful Linode API reference links"
COMMANDS_DESC["log"]="Show logs for instance"
COMMANDS_DESC["status"]="Show status of instances"

DEFAULT_TAIL_LINES=200

help_cmd() {
    echo "Usage: $(basename $0) <command> [options]"
    echo "Commands:"
    for cmd in "${COMMANDS[@]}"; do
        printf "  %-15s %s\n" "$cmd" "${COMMANDS_DESC[$cmd]}"
    done
}

create_cmd() {
    run_playbook create "$@" &&
      echo "Sleeping 30s ..." &&
      sleep 30 &&
      obscure_cmd "$@"
}

obscure_cmd() {
    export BOOT=1
    run_playbook obscure "$@" &&
      update_cmd "$@"
}

update_cmd() {
    if run_playbook update "$@" ; then
        if [ -z "$NO_TEST" ]; then
            echo "Sleeping 10 seconds ..." &&
            sleep 10 &&
            status_cmd &&
            bin/test_proxy 
        fi
    fi
}

run_playbook() {
    playbook="$1"
    shift
    ensure_all_env_variabls

    extra_args=''
    if [ -n "$BOOT" ]; then
        extra_args='-e ansible_ssh_user=root -e ansible_ssh_port=22'
    fi

    case "$TAGS" in
    ?*)
        extra_args="$extra_args --tags=facts,$TAGS"
        #command_arguments="TAGS='$TAGS' $command_arguments"
        ;;
    esac

    case "$SKIP_TAGS" in
    ?*)
        extra_args="$extra_args --skip-tags=$SKIP_TAGS"
        #command_arguments="SKIP_TAGS='$SKIP_TAGS' $command_arguments"
        ;;
    esac

    echo "Running: ansible-playbook '$playbook.yml'  $extra_args $*"
    # shellcheck disable=SC2086
    time ansible-playbook "$playbook.yml" $extra_args "$@"
}

destroy_cmd() {
    ensure_linode_token
    echo "Running: ansible-playbook destroy.yml"
    time ansible-playbook destroy.yml "$@"
}

inventory_cmd() {
  bin/inventory
}

clobber_cmd() {
    echo "Running bin/clobber"
    bin/clobber
}

links_cmd() {
    cat files/links.txt
}

status_cmd() {
    bin/status "$@"
}

log_cmd() {
    h="plannies-mate.$LINODE_DOMAIN"

    local tail_args="${*:--n $DEFAULT_TAIL_LINES}"
    # shellcheck disable=SC2029
    ssh "root@$h" "tail $tail_args /var/log/squid/access.log"
}

load_ports

command="$1"
case "$command" in
    ""|"-h"|"--help")
        help_cmd
        ;;
    *)
        shift
        valid_command=0
        for cmd in "${COMMANDS[@]}"; do
            if [[ "$command" == "$cmd" ]]; then
                valid_command=1
                break
            fi
        done

        if ((valid_command)); then
            if [ "$command" != clobber ]; then
                check_dependencies
            fi
            "${command}_cmd" "$@"
        else
            echo "Unknown command: $command"
            help_cmd
            exit 1
        fi
        ;;
esac

