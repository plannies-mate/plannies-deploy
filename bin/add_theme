#!/usr/bin/env python3

import argparse
import os

try:
    from bs4 import BeautifulSoup
except ImportError:
    print("Error: beautifulsoup4 not installed. Please run: pip install -r requirements.txt")
    exit(1)
from pathlib import Path


def find_project_root():
    """Find the project root containing roles/web/files/layouts"""
    current = Path.cwd()
    while current != current.parent:
        if (current / 'roles' / 'web' / 'files' / 'layouts').exists():
            return current
        current = current.parent
    return None


def extract_title(content):
    """Extract title from first h1 tag"""
    soup = BeautifulSoup(content, 'html.parser')
    h1 = soup.find('h1')
    return h1.get_text() if h1 else None


def determine_section(input_path):
    """Determine the section name based on the input file path"""
    path_str = str(input_path).lower()
    if 'whats_that' in path_str or 'crikey' in path_str:
        return "Crikey! What's That?"
    return "Plannies Mate"


def main():
    parser = argparse.ArgumentParser(description='Apply theme layout to HTML content')
    parser.add_argument('-t', '--layout', default='default',
                        help='Layout name (without .html extension)')
    parser.add_argument('-o', '--output-dir',
                        help='Output directory (defaults to tmp/build under project root)')
    parser.add_argument('input_file', help='Input HTML content file path')
    args = parser.parse_args()

    # Find project root
    project_root = find_project_root()
    if not project_root:
        print("Error: Could not find project root containing roles/web/files/layouts")
        return 1

    # Determine output path
    if args.output_dir:
        output_dir = Path(args.output_dir)
    else:
        output_dir = project_root / 'tmp' / 'build'

    input_path = Path(args.input_file)
    output_path = output_dir / input_path.name

    # Load layout
    layout_path = project_root / 'roles' / 'web' / 'files' / 'layouts' / f'{args.layout}.html'
    try:
        with open(layout_path) as f:
            layout_content = f.read()
    except FileNotFoundError:
        print(f"Error: Layout '{args.layout}' not found")
        return 1

    # Load input content
    try:
        with open(input_path) as f:
            content = f.read().strip()
    except FileNotFoundError:
        print(f"Error: Input file '{input_path}' not found")
        return 1

    # Extract title from h1
    title = extract_title(content)
    if not title:
        print("Warning: No h1 title found in input file")
        title = ""

    # Load appropriate favicon snippet
    is_crikey = 'whats_that' in str(input_path).lower() or 'crikey' in str(input_path).lower()
    favicon_name = 'favicon-crikey.html' if is_crikey else 'favicon-default.html'
    favicon_path = project_root / 'roles' / 'web' / 'files' / 'layouts' / favicon_name
    try:
        with open(favicon_path) as f:
            favicon_content = f.read()
    except FileNotFoundError:
        print(f"Warning: Favicon layout '{favicon_name}' not found, using empty string")
        favicon_content = ''

    # Determine section
    section = determine_section(input_path)

    # Apply layout
    output_content = layout_content.replace('{{TITLE}}', title)
    output_content = output_content.replace('{{CONTENT}}', content)
    output_content = output_content.replace('{{FAVICON}}', favicon_content)
    output_content = output_content.replace('{{SECTION}}', section)

    # Write output
    os.makedirs(output_dir, exist_ok=True)
    with open(output_path, 'w') as f:
        f.write(output_content)

    print(f"Generated: {output_path}")
    return 0


if __name__ == '__main__':
    exit(main())
