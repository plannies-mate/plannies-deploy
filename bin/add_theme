#!/usr/bin/env python3
import argparse
import os
import re

try:
    from bs4 import BeautifulSoup
except ImportError:
    print("Error: beautifulsoup4 not installed. Please run: pip install -r requirements.txt")
    exit(1)
from pathlib import Path


def find_project_root():
    """Find the project root containing roles/web/files/templates"""
    current = Path.cwd()
    while current != current.parent:
        if (current / 'roles' / 'web' / 'files' / 'templates').exists():
            return current
        current = current.parent
    return None


def extract_title(html_content):
    """Extract title from first h1 tag"""
    soup = BeautifulSoup(html_content, 'html.parser')
    h1 = soup.find('h1')
    return h1.get_text() if h1 else None


def extract_content(html_content):
    """Extract body content from HTML"""
    soup = BeautifulSoup(html_content, 'html.parser')
    body = soup.find('body')
    if not body:
        return None

    # Extract the main content div
    content = body.find('div', class_='container')
    if not content:
        return None

    return str(content.decode_contents())


def apply_template(template_content, title, content):
    """Apply title and content to template"""
    result = template_content.replace('{{TITLE}}', title if title else '')
    result = result.replace('{{CONTENT}}', content if content else '')
    return result


def main():
    parser = argparse.ArgumentParser(description='Apply theme template to HTML content')
    parser.add_argument('-t', '--template', default='default',
                        help='Template name (without .html extension)')
    parser.add_argument('-o', '--output-dir',
                        help='Output directory (defaults to tmp/build under project root)')
    parser.add_argument('input_file', help='Input HTML file path')
    args = parser.parse_args()

    # Find project root
    project_root = find_project_root()
    if not project_root:
        print("Error: Could not find project root containing roles/web/files/templates")
        return 1

    # Determine output path
    if args.output_dir:
        output_dir = Path(args.output_dir)
    else:
        output_dir = project_root / 'tmp' / 'build'

    input_path = Path(args.input_file)
    output_path = output_dir / input_path.name

    # Load template
    template_path = project_root / 'roles' / 'web' / 'files' / 'templates' / f'{args.template}.html'
    try:
        with open(template_path) as f:
            template_content = f.read()
    except FileNotFoundError:
        print(f"Error: Template '{args.template}' not found")
        return 1

    # Load input file
    try:
        with open(input_path) as f:
            input_content = f.read()
    except FileNotFoundError:
        print(f"Error: Input file '{input_path}' not found")
        return 1

    # Extract title and content
    title = extract_title(input_content)
    if not title:
        print("Warning: No h1 title found in input file")

    content = extract_content(input_content)
    if not content:
        print("Error: Could not extract content from input file")
        return 1

    # Apply template
    output_content = apply_template(template_content, title, content)

    # Write output
    os.makedirs(output_dir, exist_ok=True)
    with open(output_path, 'w') as f:
        f.write(output_content)

    print(f"Generated: {output_path}")
    return 0


if __name__ == '__main__':
    exit(main())
